name: API-DINENIT

on:
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:

jobs:
  clone:
    name: Clone Repository
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Upload Source Code
        uses: actions/upload-artifact@v4
        with:
          name: source-code
          path: .

  docker-build:
    name: Docker Build & Push
    runs-on: ubuntu-latest
    needs: clone
    permissions:
      id-token: write
      contents: read
    environment: prod
    steps:
      - name: Download Source Code
        uses: actions/download-artifact@v4
        with:
          name: source-code
          path: .

      - name: Azure Login
        run: |
          az login --service-principal \
            --username ${{ secrets.AZURE_CLIENT_ID }} \
            --password ${{ secrets.AZURE_CLIENT_SECRET }} \
            --tenant ${{ secrets.AZURE_TENANT_ID }}

      - name: Docker Login to ACR
        run: az acr login --name ${{ secrets.ACR_NAME }}

      - name: Set Docker Image Names
        run: |
          echo "IMAGE_NAME=${{ secrets.ACR_NAME }}.azurecr.io/dinenit-api-app:${{ github.sha }}" >> $GITHUB_ENV
          echo "IMAGE_LATEST=${{ secrets.ACR_NAME }}.azurecr.io/dinenit-api-app:latest" >> $GITHUB_ENV

      - name: Build Docker Image
        run: docker build -t $IMAGE_NAME .

      - name: Push Docker Image to ACR
        run: |
          docker push $IMAGE_NAME
          docker tag $IMAGE_NAME $IMAGE_LATEST
          docker push $IMAGE_LATEST

      - name: Upload k8s folder
        uses: actions/upload-artifact@v4
        with:
          name: k8s-folder
          path: k8s/

      - name: Upload prometheus folder
        uses: actions/upload-artifact@v4
        with:
          name: promethues-folder
          path: promethues/

  deploy-api-to-aks:
    name: Deploy API to AKS
    runs-on: ubuntu-latest
    needs: docker-build
    permissions:
      id-token: write
      contents: read
    environment: prod
    steps:
      - name: Download k8s Manifests
        uses: actions/download-artifact@v4
        with:
          name: k8s-folder
          path: k8s/

      - name: Azure Login
        run: |
          az login --service-principal \
            --username ${{ secrets.AZURE_CLIENT_ID }} \
            --password ${{ secrets.AZURE_CLIENT_SECRET }} \
            --tenant ${{ secrets.AZURE_TENANT_ID }}

      - name: Set Kubernetes Context
        run: |
          az aks get-credentials --resource-group ${{ secrets.AKS_RESOURCE_GROUP }} \
            --name ${{ secrets.AKS_CLUSTER_NAME }}

      - name: Replace Image in Deployment YAML
        run: |
          sed -i "s|IMAGE_PLACEHOLDER|${{ secrets.ACR_NAME }}.azurecr.io/dinenit-api-app:${{ github.sha }}|g" k8s/deployment.yml

      - name: Create Secret YAML from Template
        run: |
          echo "${{ secrets.DB_PASSWORD }}" | base64 -w 0 > encoded.txt
          ENCODED_PASSWORD=$(cat encoded.txt)
          sed "s|REPLACE_ME_BASE64|$ENCODED_PASSWORD|" k8s/secret-template.yml > k8s/secret.yml

      - name: Apply Kubernetes Resources
        run: kubectl apply -f k8s/

      - name: Verify Deployment
        run: kubectl get pods -o wide

  deploy-promethues-to-aks:
    name: Deploy Prometheus & cAdvisor
    runs-on: ubuntu-latest
    needs: deploy-api-to-aks
    permissions:
      id-token: write
      contents: read
    environment: prod
    steps:
      - name: Download Prometheus Configs
        uses: actions/download-artifact@v4
        with:
          name: promethues-folder
          path: promethues/

      - name: Azure Login
        run: |
          az login --service-principal \
            --username ${{ secrets.AZURE_CLIENT_ID }} \
            --password ${{ secrets.AZURE_CLIENT_SECRET }} \
            --tenant ${{ secrets.AZURE_TENANT_ID }}

      - name: Set Kubernetes Context
        run: |
          az aks get-credentials --resource-group ${{ secrets.AKS_RESOURCE_GROUP }} \
            --name ${{ secrets.AKS_CLUSTER_NAME }}

      - name: Apply Prometheus & cAdvisor YAMLs
        run: kubectl apply -f promethues/

      - name: Verify Monitoring Pods
        run: kubectl get pods -o wide

name: Node.js Build & Docker Build Pipeline

on:
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:

jobs:
  clone:
    name: Clone Repository
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: List Files After Checkout
        run: ls -R  

      - name: Upload Source Code
        uses: actions/upload-artifact@v4
        with:
          name: source-code
          path: .  

  build:
    name: Install Dependencies & Build
    runs-on: ubuntu-latest
    needs: clone
    env:
    NEXT_PUBLIC_PROMETHEUS_URL: ${{ secrets.NEXT_PUBLIC_PROMETHEUS_URL }}
    NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
    NEXT_PUBLIC_UI_URL: ${{ secrets.NEXT_PUBLIC_UI_URL }}
    steps:
      - name: Download Source Code
        uses: actions/download-artifact@v4
        with:
          name: source-code
          path: .

      - name: List Files After Downloading Source Code
        run: ls -R  

      - name: Set Up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'npm'

      - name: Install Dependencies
        run: npm install --legacy-peer-deps

      - name: Fix Dependency Conflicts (Downgrade React)
        run: npm install react@18.2.0 react-dom@18.2.0 --legacy-peer-deps

      - name: Install Next.js
        run: npm install next --legacy-peer-deps

      - name: List Files After Installing Dependencies
        run: ls -R  

      - name: Build Project
        run: npm run build --if-present || (echo "BUILD FAILED" && exit 1)

      - name: Verify Build Output
        run: ls -R .next || echo ".next folder NOT FOUND!"

      - name: List Files After Build
        run: ls -R  

      - name: Create Tar Archive
        run: tar -cvf node-build.tar dockerfile package.json package-lock.json .next/ public/ next.config.mjs k8s/

      - name: Upload Build Artifacts (Only Required Files)
        uses: actions/upload-artifact@v4
        with:
          name: node-build
          path: node-build.tar

  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: build
    permissions:
      id-token: write  
      contents: read
    environment: prod
    steps:
      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: node-build
          path: .

      - name: Extract Tar Archive
        run: tar -xvf node-build.tar

      - name: List Files After Downloading Build Artifacts
        run: ls -R  

      # ✅ Azure Login Using Client Secret
      - name: Log in to Azure
        run: |
          az login --service-principal \
            --username ${{ secrets.AZURE_CLIENT_ID }} \
            --password ${{ secrets.AZURE_CLIENT_SECRET }} \
            --tenant ${{ secrets.AZURE_TENANT_ID }}

      - name: Verify Azure Subscription
        run: az account show --output table

      # ✅ Docker Login to ACR
      - name: Docker Login to ACR
        run: az acr login --name ${{ secrets.ACR_NAME }}

      - name: Set Docker Image Name with Git SHA
        run: |
          echo "IMAGE_NAME=${{ secrets.ACR_NAME }}.azurecr.io/dinenit-ui-app:${{ github.sha }}" >> $GITHUB_ENV
          echo "IMAGE_LATEST=${{ secrets.ACR_NAME }}.azurecr.io/dinenit-ui-app:latest" >> $GITHUB_ENV

      - name: Build Docker Image
        run: docker build -t $IMAGE_NAME .

      - name: Push Docker Image to ACR
        run: |
          docker push $IMAGE_NAME
          docker tag $IMAGE_NAME $IMAGE_LATEST
          docker push $IMAGE_LATEST

      - name: Verify ACR Image Upload
        run: az acr repository show-tags --name ${{ secrets.ACR_NAME }} --repository dinenit-ui-app --output table

      - name: Upload k8s folder
        uses: actions/upload-artifact@v4
        with:
          name: k8s-folder
          path: k8s/

      - name: Upload promethues folder
        uses: actions/upload-artifact@v4
        with:
          name: promethues-folder
          path: promethues/

  deploy-ui-to-aks:
    name: Deploy UI to AKS
    runs-on: ubuntu-latest
    needs: docker-build
    permissions:
      id-token: write
      contents: read
    environment: prod
    steps:

      - name: Download Deployment and Services
        uses: actions/download-artifact@v4
        with:
          name: k8s-folder
          path: k8s/

      - name: List Files After Downloading Source Code
        run: ls -R   

      # ✅ Azure Login
      - name: Log in to Azure
        run: |
          az login --service-principal \
            --username ${{ secrets.AZURE_CLIENT_ID }} \
            --password ${{ secrets.AZURE_CLIENT_SECRET }} \
            --tenant ${{ secrets.AZURE_TENANT_ID }}

      - name: Set Kubernetes Context
        run: |
          az aks get-credentials --resource-group ${{ secrets.AKS_RESOURCE_GROUP }} \
            --name ${{ secrets.AKS_CLUSTER_NAME }}

      - name: Verify Kubernetes Context
        run: kubectl cluster-info

      # ✅ Replace Image Tag in Manifest Files
      - name: Update Kubernetes Deployment Image
        run: |
          sed -i "s|dinenitacrdev.azurecr.io/dinenit-ui-app:latest|dinenitacrdev.azurecr.io/dinenit-ui-app:${{ github.sha }}|g" k8s/deployment.yml

      - name: Create secret.yml from template
        run: |
          # Encode each secret value (replace with your secrets)
          echo "${{ secrets.NEXT_PUBLIC_PROMETHEUS_URL }}" | base64 -w 0 > prometheus_url_encoded.txt
          echo "${{ secrets.NEXT_PUBLIC_API_URL }}" | base64 -w 0 > api_url_encoded.txt
          echo "${{ secrets.NEXT_PUBLIC_UI_URL }}" | base64 -w 0 > ui_url_encoded.txt

          # Read the encoded values into variables
          ENCODED_PROMETHEUS_URL=$(cat prometheus_url_encoded.txt)
          ENCODED_API_URL=$(cat api_url_encoded.txt)
          ENCODED_UI_URL=$(cat ui_url_encoded.txt)

          # Replace the placeholders in the template with the base64-encoded values
          sed "s|REPLACE_ME_PROMETHEUS_URL|$ENCODED_PROMETHEUS_URL|" k8s/secret-template.yml | \
          sed "s|REPLACE_ME_API_URL|$ENCODED_API_URL|" | \
          sed "s|REPLACE_ME_UI_URL|$ENCODED_UI_URL|" > k8s/secret.yml

      - name: Apply Kubernetes Manifests
        run: |
          kubectl apply -f k8s/

      - name: Verify Deployment
        run: |
          kubectl get pods -o wide
          kubectl describe deployment dinenit-ui-app

  # deploy-promethues-to-aks:
  #   name: Deploy Promethues & cAdvisor to AKS
  #   runs-on: ubuntu-latest
  #   needs: deploy-ui-to-aks
  #   permissions:
  #     id-token: write
  #     contents: read
  #   environment: prod
  #   steps:

  #     - name: Download Deployment and Services
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: promethues-folder
  #         path: promethues/

  #     - name: List Files After Downloading Source Code
  #       run: ls -R   

  #     # ✅ Azure Login
  #     - name: Log in to Azure
  #       run: |
  #         az login --service-principal \
  #           --username ${{ secrets.AZURE_CLIENT_ID }} \
  #           --password ${{ secrets.AZURE_CLIENT_SECRET }} \
  #           --tenant ${{ secrets.AZURE_TENANT_ID }}

  #     - name: Set Kubernetes Context
  #       run: |
  #         az aks get-credentials --resource-group ${{ secrets.AKS_RESOURCE_GROUP }} \
  #           --name ${{ secrets.AKS_CLUSTER_NAME }}

  #     - name: Verify Kubernetes Context
  #       run: kubectl cluster-info

  #     - name: Apply Kubernetes Manifests
  #       run: |
  #         kubectl apply -f promethues/

  #     - name: Verify Deployment
  #       run: kubectl get pods -o wide
